<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2D on Godot Recipes by KidsCanCode</title>
    <link>http://kidscancode.org/godot_recipes/2d/</link>
    <description>Recent content in 2D on Godot Recipes by KidsCanCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 20:23:45 -0700</lastBuildDate>
    
	<atom:link href="http://kidscancode.org/godot_recipes/2d/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Platform Character</title>
      <link>http://kidscancode.org/godot_recipes/2d/platform_character/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/platform_character/</guid>
      <description>Problem You need to make a 2D platform-style character.
Solution New developers are often surprised at how complex a platform character can be to program. Godot provides some built-in tools to assist, but there are as many solutions as there are games. In this tutorial, we won&amp;rsquo;t be going in-depth with features like double-jumps, crouching, wall-jumps, or animation. Here we&amp;rsquo;ll discuss the fundamentals of platformer movement. See the rest of the recipes for other solutions.</description>
    </item>
    
    <item>
      <title>Screen wrap</title>
      <link>http://kidscancode.org/godot_recipes/2d/screen_wrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/screen_wrap/</guid>
      <description>Problem You want to allow the player to &amp;ldquo;wrap around&amp;rdquo; the screen, teleporting from one side of the screen to the other. This is a common feature, especially in old-school 2D games (think Pac-man).
Solution  Get your screen (viewport) size
onready var screen_size = get_viewport_rect().size get_viewport_rect() is available to any CanvasItem derived node.
 Compare your player&amp;rsquo;s position
if position.x &amp;gt; screen_size.x: position.x = 0 if position.x &amp;lt; 0: position.</description>
    </item>
    
    <item>
      <title>Splitscreen multiplayer</title>
      <link>http://kidscancode.org/godot_recipes/2d/splitscreen_demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/splitscreen_demo/</guid>
      <description>Introduction In this demo, we&amp;rsquo;ll consider a local multiplayer game - a topdown-style maze game with two players (one using arrow keys and the other using WASD controls). This is not a problem if our game world all fits on one screen, but if the map is large, we&amp;rsquo;ll want to have a &amp;ldquo;split screen&amp;rdquo; view tracking the two players separately.
We&amp;rsquo;ll also look at a quick way to set up a minimap display.</description>
    </item>
    
    <item>
      <title>TileMap: detecting tiles</title>
      <link>http://kidscancode.org/godot_recipes/2d/tilemap_collision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/tilemap_collision/</guid>
      <description>Problem You have a KinematicBody2D character colliding with a TileMap, and you want to know which tile it collided with.
Solution When a KinematicBody2D collides, the collision data is returned in a KinematicCollision2D object. The TileMap acts as a single collider, so if you reference the collider property, it will be the TileMap node.
You then need to find out which tile in the TileMap is at the collision location.</description>
    </item>
    
    <item>
      <title>Top-down character</title>
      <link>http://kidscancode.org/godot_recipes/2d/topdown_movement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/topdown_movement/</guid>
      <description>Problem You&amp;rsquo;re making a 2D top-down game, and you want to control a character&amp;rsquo;s movement.
Solution For this solution, we&amp;rsquo;ll assume you have the following input actions defined:
   Action Name Key(s)     &amp;quot;up&amp;quot; W,↑   &amp;quot;down&amp;quot; S,↓   &amp;quot;right&amp;quot; D,→   &amp;quot;left&amp;quot; A,←   &amp;quot;click&amp;quot; Mouse button 1    We will also assume you&amp;rsquo;re using a KinematicBody2D character.</description>
    </item>
    
    <item>
      <title>Using Autotile</title>
      <link>http://kidscancode.org/godot_recipes/2d/autotile_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kidscancode.org/godot_recipes/2d/autotile_intro/</guid>
      <description>Problem You are using a TileMap, and want to use autotiling to more quickly draw your levels.
Solution For this demo, we&amp;rsquo;ll be using the following tileset:
These tiles are from Kenney&amp;rsquo;s &amp;ldquo;Topdown Shooter&amp;rdquo; art pack, which you can find here:https://kenney.nl/assets/topdown-shooter
 Creating a map from these tiles, if you were adding them one-by-one, would be a tedious process. You would be constantly changing between tiles to line up corners, intersections, and endpoints.</description>
    </item>
    
  </channel>
</rss>