<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Your First 2D Game on Godot 4 Recipes</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/index.html</link><description>Recent content in Your First 2D Game on Godot 4 Recipes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://godotrecipes.com/godot_recipes/4.x/games/first_2d/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Setup</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_01/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_01/index.html</guid><description>This first game project will guide you through making your first Godot Engine game. While you don&amp;rsquo;t need any previous experience, it&amp;rsquo;s expected that you&amp;rsquo;ve at least read through the Godot 101: Getting Started section. There, you&amp;rsquo;ll learn about the editor interface and how to get around the Godot UI.
Why start with 2D? In a nutshell, 3D games are much more complex than 2D ones. However, many of the underlying game engine features you&amp;rsquo;ll need to know are the same.</description></item><item><title>Designing the Player Scene</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_02/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_02/index.html</guid><description>In the last section, we configured the project and downloaded the game art. Now we&amp;rsquo;re ready to start coding - starting with the player-controlled ship.
Setting up the Ship Scene A common part of the Godot workflow is creating scenes. As discussed earlier, a scene in Godot is nothing more than a collection of nodes. In most Godot projects, each game object is configured as a scene, with nodes that provide it with the desired functionality, and optionally some code to customize its behavior.</description></item><item><title>Coding the Player</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_03/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_03/index.html</guid><description>In the last section, we configured the project and downloaded the game art. Now we&amp;rsquo;re ready to start coding - starting with the player-controlled ship.
Adding a script Writing scripts and attaching them to nodes and other objects is how you build behavior and game mechanics into your game. Our Player scene displays the ship, defines its collision hitbox, etc., but it can&amp;rsquo;t move, and nothing would happen if it collided.</description></item><item><title>Bullet Scene</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_04/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_04/index.html</guid><description>Now that the player can move around the screen, our next step will be to implement shooting
Reusable objects The player will fire many &amp;ldquo;bullets&amp;rdquo; during the game, but all of them will be identical. A bullet needs to do the following:
Appear just ahead of the player Travel forward until going off the screen Detect collisions with enemies Since all bullets will do these same things, we can save ourselves a great deal of work by designing one &amp;ldquo;prototype&amp;rdquo; bullet, and using that as the blueprint for creating as many duplicates as we need.</description></item><item><title>Shooting</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_05/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_05/index.html</guid><description>The Bullet scene provides us with a reusable object we can instantiate whenever the player shoots.
Adding to the player Let&amp;rsquo;s head back to the Player script and add a few new variables:
@export var cooldown = 0.25 @export var bullet_scene : PackedScene var can_shoot = true The two @export variables let you configure them in the Inspector so that you can adjust the cooldown time. Set the bullet_scene by clicking the property and choosing the bullet.</description></item><item><title>Main Scene</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_06/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_06/index.html</guid><description>Before we can make enemies, powerups, or any other game objects, we need a place where they can all exist together with the player. In most games, this would be called a &amp;ldquo;level&amp;rdquo; or &amp;ldquo;main&amp;rdquo; scene, and that&amp;rsquo;s what we&amp;rsquo;ll call it here.
Start the scene with a Node2D called &amp;ldquo;Main&amp;rdquo; and save it.
Creating the background Add a Sprite2D child. Name this sprite &amp;ldquo;Background&amp;rdquo; and add the Space_BG (2 frames) (64 x 64).</description></item><item><title>Enemies</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_07/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_07/index.html</guid><description>Now that our enemy can shoot, let&amp;rsquo;s give them something to shoot at.
Setting up the scene We&amp;rsquo;ll use an Area2D for the enemy, since we need it to detect overlap - either with the player&amp;rsquo;s bullets, or with the player itself.
Here&amp;rsquo;s are the nodes we&amp;rsquo;ll need:
Enemy: Area2D Sprite2D CollisionShape2D AnimationPlayer MoveTimer: Timer ShootTimer: Timer Select the area node and click the Node tab next to the Inspector. Under Groups, type &amp;ldquo;enemies&amp;rdquo; an click Add.</description></item><item><title>Enemy Shooting</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_08/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_08/index.html</guid><description>Now that our enemy can shoot, let&amp;rsquo;s give them something to shoot at.
Enemy bullet scene Make a new EnemyBullet scene just like you made the player bullet earlier. We won&amp;rsquo;t go into all the steps here, but you can refer back to that part if you&amp;rsquo;re stuck. The only difference here is that you can use the Enemy_projectile (16 x 16).png image instead.
The script will be a little bit different:</description></item><item><title>UI and Score</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_09/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_09/index.html</guid><description>The last main piece of our game is the user interface (UI). We need a way to show the player the score and other information. To do this, we&amp;rsquo;ll use a variety of Control nodes - the nodes Godot provides for building UIs.
UI scene Start the scene with a MarginContainer and name it UI.
Containers are Control nodes that are designed to control the size and position of their children.</description></item><item><title>Starting and Ending the Game</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_10/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_10/index.html</guid><description>Our last step is to add a start button and a &amp;ldquo;game over&amp;rdquo; state to the game.
Starting the game Currently when we run the game, it starts immediately. Let&amp;rsquo;s add a button to start it.
In Main as a child of the CanvasLayer, add a CenterContainer and set its layout to Full Rect. Then add a TextureButton child. Name this button Start and add the START (48 x 8).png image as its Normal texture.</description></item><item><title>Wrapping up</title><link>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_end/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/games/first_2d/first_2d_end/index.html</guid><description>If you&amp;rsquo;ve been following along, you&amp;rsquo;ve learned a lot of the fundamentals of building games in Godot. We&amp;rsquo;re going to end the tutorial here, since we&amp;rsquo;ve completed the basic game.
The secret to learning effectively Here&amp;rsquo;s my big secret for getting the most out of tutorials like this and others you may find online. At the end, once you&amp;rsquo;ve finished building the project, immediately delete it and start over. This time, try and re-create it without looking at the tutorial.</description></item></channel></rss>