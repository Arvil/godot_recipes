<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gamedev Math on Godot 4 Recipes</title><link>http://kidscancode.org/godot_recipes/4.x/math/</link><description>Recent content in Gamedev Math on Godot 4 Recipes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 Apr 2019 20:47:11 -0700</lastBuildDate><atom:link href="http://kidscancode.org/godot_recipes/4.x/math/index.xml" rel="self" type="application/rss+xml"/><item><title>Interpolation</title><link>http://kidscancode.org/godot_recipes/4.x/math/interpolation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kidscancode.org/godot_recipes/4.x/math/interpolation/</guid><description>Linear Interpolation, or its commonly-used abbreviation lerp, is a term that comes up often in game development. If you&amp;rsquo;ve never come across it before it can seem mysterious and highly-technical, but as you&amp;rsquo;ll see in this tutorial, it&amp;rsquo;s actually a straightforward concept with a wide variety of applications in game programming.
Numeric Interpolation The core formula for linear interpolation is this:
func lerp(a, b, t): return (1 - t) * a + t * b In this formula, a and b represent the two values and t is the amount of interpolation, typically expressed as a value between 0 (which returns a), and 1 (which returns b).</description></item></channel></rss>